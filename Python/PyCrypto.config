# PyCrypto Configuration Details

-- Symmetric block cipher object constructors
-- key: a random byte string, possible sizes determined by each block cipher.
-- mode: block cipher mode of operation, allows block cipher to encrypt
    input of arbitrary size
-- IV: (optional) an unpredictable byte string of block size used to randomize
    the encryption of the first block of messages for modes that use block
    chaining; only used for modes CBC, CFB, OFB, PGP, and OPENPGP
-- counter: (optional) stateful function that returns the next counter value,
    a block size byte string; only used for mode CTR
-- segment_size: (optional) number of bits the plaintext and ciphertext are
    segmented in; must be a multiple of 8; only used for mode CFB
Crypto.Cipher.{AES, DES, DES3, Blowfish, ARC2, CAST}.new(key, mode, IV, counter, segment_size) :
    key : N/A {byte string}
    mode: ECB {ECB, CBC, CFB, PGP, OFB, CTR, OPENPGP}
    iv: block_size byte string of all zeroes {block_size length byte string}
    counter: N/A {Crypto.Util.Counter object}
    segment_size: 8 {positive integer multiple of 8}
    
-- Symmetric stream cipher object constructors
-- key: a random bytestring, possible sizes determined by each stream cipher
Crypto.Cipher.{ARC4, XOR}.new(key)
    key : N/A {byte string}
    
-- Hash-based Message Authentication Code (HMAC) object constructor
-- key: a random byte string, technically, no limit on key size, but practically
    no benefit to key size larger than the size of the digest produced by the
    hash function passed in as digestmod
-- msg: (optional) first chunk of method to be authenticated
-- digestmod: Hash module or object (from Crypto.Hash) used by HMAC algorithm
Crypto.Hash.HMAC.new(key, msg, digest_mod)
    key : N/A {byte string}
    msg : N/A {byte string}
    digestmod : MD5 {MD2, MD4, MD5, RIPEMD, SHA, SHA224, SHA256, SHA384, SHA512}
    
-- Public key encryption scheme RSAES-OAEP, or PKCS#1 OAEP, cipher object 
    constructor (defined in RFC 3447)
-- key: An RSA key object. Should be public key for encryption and private key
    for decryption.
-- hashAlgo: Hash module or object (from Crypto.Hash) used by OAEP scheme
-- mgfunc: a mask generation function
-- label: a string label that identifies this particular encryption; no security
    benefit to label inclusion.
Crypto.Cipher.PKCS1_OAEP.new(key, hashAlgo, mgfunc, label)
    key : N/A {RSA key object}
    hashAlgo : SHA {MD2, MD4, MD5, RIPEMD, SHA, SHA224, SHA256, SHA384, SHA256}
    mgfunc : MGF1 {MGF1}
    label : "" {string}